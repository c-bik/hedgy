% Autogenerated with DRAKON Editor 1.21

-module(elli_machine_flow).
-export([handle_request/1]).
%%
%% Header
%%

-include_lib("elli/include/elli.hrl").
-include("elli_machine.hrl").
-include("elli_machine_internal.hrl").




accept_charset(State) ->
    % item 517
    CheckCharset = get_header(<<"Accept-Charset">>, State, <<"*">>),
    {CharsetsAvailable, S1} = call(charsets_provided, State),
    % item 562
    if CharsetsAvailable =:= no_charset -> 
        % item 565
        {true, [], S1}
    ; true ->
        % item 564
        ChosenCharset = 
            elli_machine_util:choose_charset(CharsetsAvailable, CheckCharset),
        % item 524
        if ChosenCharset =:= none -> 
            % item 527
            {false, [], S1}
        ; true ->
            % item 534
            S2 = set_resp_chosen_charset(ChosenCharset, S1),
            {true, CharsetsAvailable, S2}
        end
    end
.

accept_content_encoding(State) ->
    % item 537
    CheckEncoding = get_header(<<"Accept-Encoding">>, 
        State, <<"identity;q=1.0,*;q=0.5">>),
    {EncodingsProvided, S1} = call(content_encodings_provided, State),
    ChosenContentEncoding = 
        elli_machine_util:choose_encoding(EncodingsProvided, CheckEncoding),
    % item 538
    if ChosenContentEncoding =:= none -> 
        % item 541
        {false, [], State}
    ; true ->
        % item 574
        S2 = case ChosenContentEncoding of
            <<"identity">> -> 
                S1;
            _ ->
                Ex1 = emx:set_resp_header(<<"Content-Encoding">>, 
                    ChosenContentEncoding, exchange(S1)), 
                set_exchange(Ex1, S1)
        end,
        % item 515
        {true, EncodingsProvided, S2}
    end
.

accept_content_type(State) ->
    % item 435
    {ContentTypesProvided, S1} = call(content_types_provided, State),
    AcceptHeader = get_header(<<"Accept">>, State, undefined),
    % item 436
    if AcceptHeader =:= undefined -> 
        % item 500
        {Ct, Cf} = hd(ContentTypesProvided),
        S2 = with_exchange(fun(Ex) ->
                Ex1 = emx:set_resp_content_type(Ct, Ex),
                emx:set_resp_content_fun(Cf, Ex1) 
             end, S1),
        {true, ContentTypesProvided, S2}
    ; true ->
        % item 439
        ChosenMediaType = 
            elli_machine_util:select_media_type(ContentTypesProvided, AcceptHeader),
        % item 440
        if ChosenMediaType =:= none -> 
            % item 446
            {false, [], S1}
        ; true ->
            % item 535
            {MediaType, Fun} = ChosenMediaType,
            
            S2 = with_exchange(fun(Ex) ->
                    Ex1 = emx:set_resp_content_type(MediaType, Ex),
                    emx:set_resp_content_fun(Fun, Ex1) 
                 end, S1),
            
            {true, ContentTypesProvided, S2}
        end
    end
.

accept_language(State) ->
    % item 459
    Req = request(State),
    AcceptLanguageHeader = 
    	elli_request:get_header(<<"Accept-Language">>, Req),
    % item 460
    if AcceptLanguageHeader =:= undefined -> 
        % item 465
        {true, State}
    ; true ->
        % item 462
        {LanguageAvailable, S1} = call(language_available, State),
        % item 463
        if LanguageAvailable -> 
            % item 466
            {true, S1}
        ; true ->
            % item 467
            {false, S1}
        end
    end
.

call(Name, State) ->
    % item 369
    elli_machine_controller:call(Name, State)
.

content_negotiation(State) ->
    % item 478
    {ContentTypeAccepted, ContentTypesAvailable, S1} =
         accept_content_type(State),
    % item 479
    if ContentTypeAccepted -> 
        % item 484
        {LanguageAccepted, S2} = accept_language(S1),
        % item 485
        if LanguageAccepted -> 
            % item 491
            {CharsetAccepted, CharsetsAvailable, S3} = accept_charset(S2),
            % item 492
            if CharsetAccepted -> 
                % item 495
                {ContentEncodingAccepted, ContentEncodingsAvailable, S4} = 
                    accept_content_encoding(S3),
                % item 497
                if ContentEncodingAccepted -> 
                    % item 536
                    %% Set Content-Type header
                    S5 = with_exchange(fun(Exchange) ->
                            CType = emx:get_resp_content_type(Exchange),
                            CSet = case emx:get_resp_chosen_charset(Exchange) of
                                undefined -> <<"">>;
                                Cs -> <<"; charset=", Cs/binary>>
                            end,
                            emx:set_resp_header(<<"Content-Type">>, 
                            <<CType/binary, CSet/binary>>, Exchange) 
                         end, S4),
                    % item 561
                    V1 = add_variance(ContentTypesAvailable, <<"Accept">>, []),
                    V2 = add_variance(CharsetsAvailable, <<"Accept-Charset">>, V1),
                    V3 = add_variance(ContentEncodingsAvailable, <<"Accept-Encoding">>, V2),
                    {ControllerVariances, S6} = call(variances, S5),
                    Variances = ControllerVariances ++ V3,
                    % item 575
                    if Variances =:= [] -> 
                        % item 578
                        {true, S6}
                    ; true ->
                        % item 483
                        S7 = set_resp_header(<<"Vary">>, 
                            elli_machine_util:binary_join(Variances, <<", ">>), S6),
                        {true, S7}
                    end
                ; true ->
                    % item 499
                    {false, S4}
                end
            ; true ->
                % item 494
                {false, S3}
            end
        ; true ->
            % item 488
            {false, S2}
        end
    ; true ->
        % item 482
        {false, S1}
    end
.

delete_flow(State) ->
    % item 377
    State
.

exchange(State) ->
    % item 351
    State#machine_flow_state.exchange
.

finalize(State) ->
    % item 296
    HasRespBody = has_resp_body(State),
    % item 171
    if HasRespBody -> 
        % item 189
        {MultipleChoices, S1} = call(multiple_choices, State),
        % item 174
        if MultipleChoices -> 
            % item 178
            % Multiple Choices
            respond(300, S1)
        ; true ->
            % item 192
            % OK
            respond(200, S1)
        end
    ; true ->
        % item 177
        % No Content
        respond(204, State)
    end
.

get_flow(State) ->
    % item 194
    Req = request(State),
    {ResourceExists, S1} = call(resource_exists, State),
    % item 6
    if ResourceExists -> 
        % item 301
        {ETag, S2} = call(generate_etag, S1),
        IfMatchHeader = 
            elli_request:get_header(<<"If-Match">>, Req),
        % item 23
        if IfMatchHeader =:= undefined -> 
            % item 290
            {LastModified, S3} = call(last_modified, S2),
            % item 302
            if LastModified =:= undefined -> 
                % item 284
                {Expires, S4} = call(expires, S3),
                S5 = set_etag(ETag, S4),
                S6 = set_expires(Expires, S5),
                % item 304
                IfNoneMatch = 
                    elli_request:get_header(<<"If-None-Match">>, Req),
                % item 36
                if IfNoneMatch =:= undefined -> 
                    % item 39
                    if IfNoneMatch =:= <<"*">> -> 
                        % item 44
                        % Not Modified
                        error(304, S6)
                    ; true ->
                        % item 298
                        ETagMatches = 
                            match_etag(ETag, IfMatchHeader),
                        % item 45
                        if ETagMatches -> 
                            % item 44
                            % Not Modified
                            error(304, S6)
                        ; true ->
                            % item 46
                            S7 = set_last_modified(LastModified, S6),
                            
                            Ex = exchange(S7),
                            {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                            Ex1 = emx:set_resp_body(Response, Ex),
                            S9 = set_exchange(Ex1, S8),
                            % item 187
                            finalize(S9)
                        end
                    end
                ; true ->
                    % item 46
                    S7 = set_last_modified(LastModified, S6),
                    
                    Ex = exchange(S7),
                    {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                    Ex1 = emx:set_resp_body(Response, Ex),
                    S9 = set_exchange(Ex1, S8),
                    % item 187
                    finalize(S9)
                end
            ; true ->
                % item 289
                IfModifiedSince =
                    elli_request:get_header(<<"If-Modified-Since">>, Req),
                % item 33
                if IfModifiedSince =:= undefined -> 
                    % item 284
                    {Expires, S4} = call(expires, S3),
                    S5 = set_etag(ETag, S4),
                    S6 = set_expires(Expires, S5),
                    % item 304
                    IfNoneMatch = 
                        elli_request:get_header(<<"If-None-Match">>, Req),
                    % item 36
                    if IfNoneMatch =:= undefined -> 
                        % item 39
                        if IfNoneMatch =:= <<"*">> -> 
                            % item 44
                            % Not Modified
                            error(304, S6)
                        ; true ->
                            % item 298
                            ETagMatches = 
                                match_etag(ETag, IfMatchHeader),
                            % item 45
                            if ETagMatches -> 
                                % item 44
                                % Not Modified
                                error(304, S6)
                            ; true ->
                                % item 46
                                S7 = set_last_modified(LastModified, S6),
                                
                                Ex = exchange(S7),
                                {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                Ex1 = emx:set_resp_body(Response, Ex),
                                S9 = set_exchange(Ex1, S8),
                                % item 187
                                finalize(S9)
                            end
                        end
                    ; true ->
                        % item 46
                        S7 = set_last_modified(LastModified, S6),
                        
                        Ex = exchange(S7),
                        {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                        Ex1 = emx:set_resp_body(Response, Ex),
                        S9 = set_exchange(Ex1, S8),
                        % item 187
                        finalize(S9)
                    end
                ; true ->
                    % item 57
                    if LastModified > IfModifiedSince -> 
                        % item 371
                        % Precondition Failed
                        error(412, S3)
                    ; true ->
                        % item 284
                        {Expires, S4} = call(expires, S3),
                        S5 = set_etag(ETag, S4),
                        S6 = set_expires(Expires, S5),
                        % item 304
                        IfNoneMatch = 
                            elli_request:get_header(<<"If-None-Match">>, Req),
                        % item 36
                        if IfNoneMatch =:= undefined -> 
                            % item 39
                            if IfNoneMatch =:= <<"*">> -> 
                                % item 44
                                % Not Modified
                                error(304, S6)
                            ; true ->
                                % item 298
                                ETagMatches = 
                                    match_etag(ETag, IfMatchHeader),
                                % item 45
                                if ETagMatches -> 
                                    % item 44
                                    % Not Modified
                                    error(304, S6)
                                ; true ->
                                    % item 46
                                    S7 = set_last_modified(LastModified, S6),
                                    
                                    Ex = exchange(S7),
                                    {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                    Ex1 = emx:set_resp_body(Response, Ex),
                                    S9 = set_exchange(Ex1, S8),
                                    % item 187
                                    finalize(S9)
                                end
                            end
                        ; true ->
                            % item 46
                            S7 = set_last_modified(LastModified, S6),
                            
                            Ex = exchange(S7),
                            {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                            Ex1 = emx:set_resp_body(Response, Ex),
                            S9 = set_exchange(Ex1, S8),
                            % item 187
                            finalize(S9)
                        end
                    end
                end
            end
        ; true ->
            % item 26
            if IfMatchHeader =:= <<"*">> -> 
                % item 290
                {LastModified, S3} = call(last_modified, S2),
                % item 302
                if LastModified =:= undefined -> 
                    % item 284
                    {Expires, S4} = call(expires, S3),
                    S5 = set_etag(ETag, S4),
                    S6 = set_expires(Expires, S5),
                    % item 304
                    IfNoneMatch = 
                        elli_request:get_header(<<"If-None-Match">>, Req),
                    % item 36
                    if IfNoneMatch =:= undefined -> 
                        % item 39
                        if IfNoneMatch =:= <<"*">> -> 
                            % item 44
                            % Not Modified
                            error(304, S6)
                        ; true ->
                            % item 298
                            ETagMatches = 
                                match_etag(ETag, IfMatchHeader),
                            % item 45
                            if ETagMatches -> 
                                % item 44
                                % Not Modified
                                error(304, S6)
                            ; true ->
                                % item 46
                                S7 = set_last_modified(LastModified, S6),
                                
                                Ex = exchange(S7),
                                {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                Ex1 = emx:set_resp_body(Response, Ex),
                                S9 = set_exchange(Ex1, S8),
                                % item 187
                                finalize(S9)
                            end
                        end
                    ; true ->
                        % item 46
                        S7 = set_last_modified(LastModified, S6),
                        
                        Ex = exchange(S7),
                        {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                        Ex1 = emx:set_resp_body(Response, Ex),
                        S9 = set_exchange(Ex1, S8),
                        % item 187
                        finalize(S9)
                    end
                ; true ->
                    % item 289
                    IfModifiedSince =
                        elli_request:get_header(<<"If-Modified-Since">>, Req),
                    % item 33
                    if IfModifiedSince =:= undefined -> 
                        % item 284
                        {Expires, S4} = call(expires, S3),
                        S5 = set_etag(ETag, S4),
                        S6 = set_expires(Expires, S5),
                        % item 304
                        IfNoneMatch = 
                            elli_request:get_header(<<"If-None-Match">>, Req),
                        % item 36
                        if IfNoneMatch =:= undefined -> 
                            % item 39
                            if IfNoneMatch =:= <<"*">> -> 
                                % item 44
                                % Not Modified
                                error(304, S6)
                            ; true ->
                                % item 298
                                ETagMatches = 
                                    match_etag(ETag, IfMatchHeader),
                                % item 45
                                if ETagMatches -> 
                                    % item 44
                                    % Not Modified
                                    error(304, S6)
                                ; true ->
                                    % item 46
                                    S7 = set_last_modified(LastModified, S6),
                                    
                                    Ex = exchange(S7),
                                    {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                    Ex1 = emx:set_resp_body(Response, Ex),
                                    S9 = set_exchange(Ex1, S8),
                                    % item 187
                                    finalize(S9)
                                end
                            end
                        ; true ->
                            % item 46
                            S7 = set_last_modified(LastModified, S6),
                            
                            Ex = exchange(S7),
                            {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                            Ex1 = emx:set_resp_body(Response, Ex),
                            S9 = set_exchange(Ex1, S8),
                            % item 187
                            finalize(S9)
                        end
                    ; true ->
                        % item 57
                        if LastModified > IfModifiedSince -> 
                            % item 371
                            % Precondition Failed
                            error(412, S3)
                        ; true ->
                            % item 284
                            {Expires, S4} = call(expires, S3),
                            S5 = set_etag(ETag, S4),
                            S6 = set_expires(Expires, S5),
                            % item 304
                            IfNoneMatch = 
                                elli_request:get_header(<<"If-None-Match">>, Req),
                            % item 36
                            if IfNoneMatch =:= undefined -> 
                                % item 39
                                if IfNoneMatch =:= <<"*">> -> 
                                    % item 44
                                    % Not Modified
                                    error(304, S6)
                                ; true ->
                                    % item 298
                                    ETagMatches = 
                                        match_etag(ETag, IfMatchHeader),
                                    % item 45
                                    if ETagMatches -> 
                                        % item 44
                                        % Not Modified
                                        error(304, S6)
                                    ; true ->
                                        % item 46
                                        S7 = set_last_modified(LastModified, S6),
                                        
                                        Ex = exchange(S7),
                                        {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                        Ex1 = emx:set_resp_body(Response, Ex),
                                        S9 = set_exchange(Ex1, S8),
                                        % item 187
                                        finalize(S9)
                                    end
                                end
                            ; true ->
                                % item 46
                                S7 = set_last_modified(LastModified, S6),
                                
                                Ex = exchange(S7),
                                {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                Ex1 = emx:set_resp_body(Response, Ex),
                                S9 = set_exchange(Ex1, S8),
                                % item 187
                                finalize(S9)
                            end
                        end
                    end
                end
            ; true ->
                % item 291
                ETagMatches = 
                    match_etag(ETag, IfMatchHeader),
                % item 29
                if ETagMatches -> 
                    % item 290
                    {LastModified, S3} = call(last_modified, S2),
                    % item 302
                    if LastModified =:= undefined -> 
                        % item 284
                        {Expires, S4} = call(expires, S3),
                        S5 = set_etag(ETag, S4),
                        S6 = set_expires(Expires, S5),
                        % item 304
                        IfNoneMatch = 
                            elli_request:get_header(<<"If-None-Match">>, Req),
                        % item 36
                        if IfNoneMatch =:= undefined -> 
                            % item 39
                            if IfNoneMatch =:= <<"*">> -> 
                                % item 44
                                % Not Modified
                                error(304, S6)
                            ; true ->
                                % item 298
                                ETagMatches = 
                                    match_etag(ETag, IfMatchHeader),
                                % item 45
                                if ETagMatches -> 
                                    % item 44
                                    % Not Modified
                                    error(304, S6)
                                ; true ->
                                    % item 46
                                    S7 = set_last_modified(LastModified, S6),
                                    
                                    Ex = exchange(S7),
                                    {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                    Ex1 = emx:set_resp_body(Response, Ex),
                                    S9 = set_exchange(Ex1, S8),
                                    % item 187
                                    finalize(S9)
                                end
                            end
                        ; true ->
                            % item 46
                            S7 = set_last_modified(LastModified, S6),
                            
                            Ex = exchange(S7),
                            {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                            Ex1 = emx:set_resp_body(Response, Ex),
                            S9 = set_exchange(Ex1, S8),
                            % item 187
                            finalize(S9)
                        end
                    ; true ->
                        % item 289
                        IfModifiedSince =
                            elli_request:get_header(<<"If-Modified-Since">>, Req),
                        % item 33
                        if IfModifiedSince =:= undefined -> 
                            % item 284
                            {Expires, S4} = call(expires, S3),
                            S5 = set_etag(ETag, S4),
                            S6 = set_expires(Expires, S5),
                            % item 304
                            IfNoneMatch = 
                                elli_request:get_header(<<"If-None-Match">>, Req),
                            % item 36
                            if IfNoneMatch =:= undefined -> 
                                % item 39
                                if IfNoneMatch =:= <<"*">> -> 
                                    % item 44
                                    % Not Modified
                                    error(304, S6)
                                ; true ->
                                    % item 298
                                    ETagMatches = 
                                        match_etag(ETag, IfMatchHeader),
                                    % item 45
                                    if ETagMatches -> 
                                        % item 44
                                        % Not Modified
                                        error(304, S6)
                                    ; true ->
                                        % item 46
                                        S7 = set_last_modified(LastModified, S6),
                                        
                                        Ex = exchange(S7),
                                        {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                        Ex1 = emx:set_resp_body(Response, Ex),
                                        S9 = set_exchange(Ex1, S8),
                                        % item 187
                                        finalize(S9)
                                    end
                                end
                            ; true ->
                                % item 46
                                S7 = set_last_modified(LastModified, S6),
                                
                                Ex = exchange(S7),
                                {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                Ex1 = emx:set_resp_body(Response, Ex),
                                S9 = set_exchange(Ex1, S8),
                                % item 187
                                finalize(S9)
                            end
                        ; true ->
                            % item 57
                            if LastModified > IfModifiedSince -> 
                                % item 371
                                % Precondition Failed
                                error(412, S3)
                            ; true ->
                                % item 284
                                {Expires, S4} = call(expires, S3),
                                S5 = set_etag(ETag, S4),
                                S6 = set_expires(Expires, S5),
                                % item 304
                                IfNoneMatch = 
                                    elli_request:get_header(<<"If-None-Match">>, Req),
                                % item 36
                                if IfNoneMatch =:= undefined -> 
                                    % item 39
                                    if IfNoneMatch =:= <<"*">> -> 
                                        % item 44
                                        % Not Modified
                                        error(304, S6)
                                    ; true ->
                                        % item 298
                                        ETagMatches = 
                                            match_etag(ETag, IfMatchHeader),
                                        % item 45
                                        if ETagMatches -> 
                                            % item 44
                                            % Not Modified
                                            error(304, S6)
                                        ; true ->
                                            % item 46
                                            S7 = set_last_modified(LastModified, S6),
                                            
                                            Ex = exchange(S7),
                                            {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                            Ex1 = emx:set_resp_body(Response, Ex),
                                            S9 = set_exchange(Ex1, S8),
                                            % item 187
                                            finalize(S9)
                                        end
                                    end
                                ; true ->
                                    % item 46
                                    S7 = set_last_modified(LastModified, S6),
                                    
                                    Ex = exchange(S7),
                                    {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                    Ex1 = emx:set_resp_body(Response, Ex),
                                    S9 = set_exchange(Ex1, S8),
                                    % item 187
                                    finalize(S9)
                                end
                            end
                        end
                    end
                ; true ->
                    % item 32
                    % Precondition Failed
                    error(412, S2)
                end
            end
        end
    ; true ->
        % item 286
        {PreviouslyExisted, S2} =
            call(previously_existed, S1),
        % item 9
        if PreviouslyExisted -> 
            % item 287
            {MovedPermanently, S3} = 
                call(moved_permanently, S2),
            % item 58
            if MovedPermanently -> 
                % item 61
                % Moved Permanently
                error(301, S3)
            ; true ->
                % item 288
                {MovedTemporarily, S4} =
                    call(moved_temporarily, S3),
                % item 62
                if MovedTemporarily -> 
                    % item 65
                    % Moved Temporarily
                    error(307, S4)
                ; true ->
                    % item 66
                    % Gone
                    error(410, S4)
                end
            end
        ; true ->
            % item 12
            % Not Found
            error(404, S2)
        end
    end
.

get_header(Name, State, Default) ->
    % item 547
    case elli_request:get_header(Name, request(State)) of
        undefined -> Default;
        Hdr -> Hdr
    end
.

handle_request(State) ->
    % item 407
    Req = request(State),
    % item 270
    {Pong, S1} = call(ping, State),
    % item 217
    if Pong =:= pong -> 
        % item 271
        {ServiceAvailable, S2} = 
            call(service_available, S1),
        % item 220
        if ServiceAvailable -> 
            % item 274
            {KnownMethods, S3} = 
                call(known_methods, S2),
            Method = elli_request:method(request(S3)),
            IsKnownMethod = 
                lists:member(Method, KnownMethods),
            % item 223
            if IsKnownMethod -> 
                % item 275
                {UriTooLong, S4} = call(uri_too_long, S3),
                % item 227
                if UriTooLong -> 
                    % item 230
                    % Request-URI Too Long
                    respond(414, S4)
                ; true ->
                    % item 276
                    {AllowedMethods, S5} = call(allowed_methods, S4),
                    IsAllowedMethod = 
                        lists:member(Method, AllowedMethods),
                    % item 231
                    if IsAllowedMethod -> 
                        % item 277
                        {MalformedRequest, S6} = 
                            call(malformed_request, S5),
                        % item 278
                        if MalformedRequest -> 
                            % item 280
                            % Bad Request
                            respond(400, S6)
                        ; true ->
                            % item 281
                            {IsAuthorized, S7} = call(is_authorized, S6),
                            % item 240
                            if IsAuthorized =:= true -> 
                                % item 283
                                {Forbidden, S8} = call(forbidden, S7),
                                % item 243
                                if Forbidden -> 
                                    % item 246
                                    % Forbidden
                                    respond(403, S7)
                                ; true ->
                                    % item 402
                                    if Method =:= 'OPTIONS' -> 
                                        % item 268
                                        options_flow(S8)
                                    ; true ->
                                        % item 489
                                        {ContentAccepted, S9} = content_negotiation(S8),
                                        % item 448
                                        if ContentAccepted -> 
                                            % item 2530001
                                            if Method =:= 'GET' orelse 'HEAD' -> 
                                                % item 264
                                                get_flow(S9)
                                            ; true ->
                                                % item 2530002
                                                if Method =:= 'POST' -> 
                                                    % item 265
                                                    post_flow(S9)
                                                ; true ->
                                                    % item 2530003
                                                    if Method =:= 'PUT' -> 
                                                        % item 266
                                                        put_flow(S9)
                                                    ; true ->
                                                        % item 2530004
                                                        if Method =:= 'DELETE' -> 
                                                            []
                                                        ; true ->
                                                            % item 2530005
                                                            throw("Unexpected switch value")
                                                        end,
                                                        % item 267
                                                        delete_flow(S9)
                                                    end
                                                end
                                            end
                                        ; true ->
                                            % item 417
                                            % Not Acceptable
                                            respond(406, S8)
                                        end
                                    end
                                end
                            ; true ->
                                % item 247
                                %% TODO,
                                % item 282
                                %% {error, Reason} ->
                                %%    error_response(Reason, Rs1, Rd1);
                                %% {halt, Code}  ->
                                %%    respond(Code, Rs1, Rd1);
                                %% AuthHead ->
                                %%    RdAuth = emr:set_resp_header(<<"WWW-Authenticate">>, AuthHead, Rd1),
                                respond(401, S7)
                            end
                        end
                    ; true ->
                        % item 250
                        BinMethods = [ erlang:atom_to_binary(M, latin1) || M <- AllowedMethods], 
                        HeaderValues = elli_machine_util:binary_join(BinMethods, <<", ">>),
                        SAllow = set_resp_header(<<"Allow">>, HeaderValues, S5),
                        
                        % Method Not Allowed
                        respond(405, SAllow)
                    end
                end
            ; true ->
                % item 226
                % Not Implemented
                respond(501, S3)
            end
        ; true ->
            % item 219
            % Service Unavailable
            respond(503, S2)
        end
    ; true ->
        % item 273
        % Service Unavailable
        respond(503, S1)
    end
.

has_resp_body(State) ->
    % item 345
    emx:has_resp_body(exchange(State))
.

options_flow(State) ->
    % item 387
    {Hdrs, S1} = call(options, State),
    Exc = exchange(State),
    Exc1 = emx:set_resp_headers(Hdrs, Exc),
    S2 = set_exchange(Exc1, S1),
    % item 401
    % Ok
    respond(200, S2)
.

post_flow(State) ->
    % item 294
    Req = request(State),
    % item 389
    {ValidContentHeaders, S1} = 
        call(valid_content_headers, State),
    % item 392
    if ValidContentHeaders -> 
        % item 390
        {KnownContentType, S2} =
            call(known_content_type, S1),
        % item 394
        if KnownContentType -> 
            % item 391
            {ValidEntityLength, S3} =
                call(valid_entity_length, S2),
            % item 396
            if ValidEntityLength -> 
                % item 388
                {ResourceExists, S4} = 
                    call(resource_exists, S3),
                % item 72
                if ResourceExists -> 
                    % item 306
                    {LastModified, S5} = call(last_modified, S4),
                    % item 307
                    if LastModified =:= undefined -> 
                        % item 295
                        IfModifiedSince =
                            elli_request:get_header(<<"If-Modified-Since">>, Req),
                        % item 75
                        if IfModifiedSince =:= undefined -> 
                            % item 312
                            
                            ContentTypeHeader =
                                elli_request:get_header(
                            	<<"Content-Type">>, Req, <<"application/octet-stream">>),
                            {ContentTypesAccepted, S6} = call(content_types_accepted, S5),
                            SelectedContentType = 
                                elli_machine_util:select_content_type(ContentTypesAccepted, 
                                    ContentTypeHeader),
                            % item 81
                            if SelectedContentType =:= none -> 
                                % item 112
                                % Unsupported MediaType
                                respond(415, S6)
                            ; true ->
                                % item 582
                                {_, ProcessFun} = SelectedContentType,
                                % item 315
                                {ProcessResult, S7} = call(ProcessFun, S6),
                                % item 325
                                if ProcessResult =:= true -> 
                                    % item 324
                                    S8 = encode_body_if_set(S7),
                                    % item 179
                                    finalize(S8)
                                ; true ->
                                    % item 323
                                    {redirect, Url} = ProcessResult,
                                    S8 = set_header_if_not_set(<<"Location">>, Url, S7),
                                    % item 100
                                    % See Other
                                    respond(303, S8)
                                end
                            end
                        ; true ->
                            % item 181
                            if LastModified > IfModifiedSince -> 
                                % item 312
                                
                                ContentTypeHeader =
                                    elli_request:get_header(
                                	<<"Content-Type">>, Req, <<"application/octet-stream">>),
                                {ContentTypesAccepted, S6} = call(content_types_accepted, S5),
                                SelectedContentType = 
                                    elli_machine_util:select_content_type(ContentTypesAccepted, 
                                        ContentTypeHeader),
                                % item 81
                                if SelectedContentType =:= none -> 
                                    % item 112
                                    % Unsupported MediaType
                                    respond(415, S6)
                                ; true ->
                                    % item 582
                                    {_, ProcessFun} = SelectedContentType,
                                    % item 315
                                    {ProcessResult, S7} = call(ProcessFun, S6),
                                    % item 325
                                    if ProcessResult =:= true -> 
                                        % item 324
                                        S8 = encode_body_if_set(S7),
                                        % item 179
                                        finalize(S8)
                                    ; true ->
                                        % item 323
                                        {redirect, Url} = ProcessResult,
                                        S8 = set_header_if_not_set(<<"Location">>, Url, S7),
                                        % item 100
                                        % See Other
                                        respond(303, S8)
                                    end
                                end
                            ; true ->
                                % item 184
                                % generate_etag/2,
                                % item 185
                                % expires/2,
                                % item 186
                                % Not Modified
                                respond(304, S5)
                            end
                        end
                    ; true ->
                        % item 312
                        
                        ContentTypeHeader =
                            elli_request:get_header(
                        	<<"Content-Type">>, Req, <<"application/octet-stream">>),
                        {ContentTypesAccepted, S6} = call(content_types_accepted, S5),
                        SelectedContentType = 
                            elli_machine_util:select_content_type(ContentTypesAccepted, 
                                ContentTypeHeader),
                        % item 81
                        if SelectedContentType =:= none -> 
                            % item 112
                            % Unsupported MediaType
                            respond(415, S6)
                        ; true ->
                            % item 582
                            {_, ProcessFun} = SelectedContentType,
                            % item 315
                            {ProcessResult, S7} = call(ProcessFun, S6),
                            % item 325
                            if ProcessResult =:= true -> 
                                % item 324
                                S8 = encode_body_if_set(S7),
                                % item 179
                                finalize(S8)
                            ; true ->
                                % item 323
                                {redirect, Url} = ProcessResult,
                                S8 = set_header_if_not_set(<<"Location">>, Url, S7),
                                % item 100
                                % See Other
                                respond(303, S8)
                            end
                        end
                    end
                ; true ->
                    % item 309
                    {PreviouslyExisted, S5} =
                        call(previously_existed, S4),
                    % item 104
                    if PreviouslyExisted -> 
                        % item 310
                        {MovedPermanently, S6} = 
                            call(moved_permanently, S5),
                        % item 113
                        if MovedPermanently -> 
                            % item 120
                            % Moved Permanently
                            respond(301, S6)
                        ; true ->
                            % item 311
                            {MovedTemporarily, S7} = 
                                call(moved_temporarily, S6),
                            % item 121
                            if MovedTemporarily -> 
                                % item 124
                                % Moved Temporarily
                                respond(307, S7)
                            ; true ->
                                % item 579
                                if missing-post -> 
                                    []
                                ; true ->
                                    []
                                end,
                                % item 125
                                % Gone
                                respond(410, S7)
                            end
                        end
                    ; true ->
                        % item 313
                        {AllowMissingPost, S6} = 
                            call(allow_missing_post, S5),
                        % item 117
                        if AllowMissingPost -> 
                            % item 337
                            {ContentTypesAccepted, S7} = 
                                call(content_types_accepted, S6),
                            % item 126
                            if ContentTypesAccepted =:= [] -> 
                                % item 339
                                {_ProcessResult, S8} = call(process_post, S7),
                                % item 314
                                Location = 
                                    get_resp_header(<<"Location">>, S8),
                                % item 134
                                if Location =/= undefined -> 
                                    % item 137
                                    % Created
                                    respond(201, S8)
                                ; true ->
                                    % item 180
                                    finalize(S8)
                                end
                            ; true ->
                                % item 338
                                % Unsupported MediaType
                                respond(415, S7)
                            end
                        ; true ->
                            % item 116
                            % Not Found
                            respond(404, S6)
                        end
                    end
                end
            ; true ->
                % item 398
                % Request Entity Too Large
                respond(413, S3)
            end
        ; true ->
            % item 399
            % Unsupported Media Type
            respond(415, S2)
        end
    ; true ->
        % item 400
        % Not Implemented
        respond(501, S1)
    end
.

put_flow(State) ->
    % item 386
    State
.

request(State) ->
    % item 384
    Exchange = State#machine_flow_state.exchange,
    Exchange#machine_exchange.req
.

respond(Code, State) ->
    % item 573
    Ex = exchange(State),
    Ex1 = emx:set_resp_code(Code, Ex),
    S1 = set_exchange(Ex1, State),
    % item 385
    {Code, S1}
.

set_exchange(Exchange, State) ->
    % item 553
    State#machine_flow_state{exchange=Exchange}
.

with_exchange(Fun, State) ->
    % item 572
    Exchange = Fun(State#machine_flow_state.exchange),
    State#machine_flow_state{exchange=Exchange}
.

%%
%% Helpers
%%

% @doc Add a variance if needed.
add_variance([], _, Variances) ->
    Variances;
add_variance([_], _, Variances) ->
    Variances;
add_variance(_, Name, Variances) ->
    [Name | Variances].


% @doc Set the response's chosen charset
set_resp_chosen_charset(Charset, State) ->
    Ex = emx:set_resp_chosen_charset(Charset, exchange(State)),
    set_exchange(Ex, State).
    

set_etag(_Tag, State) ->
    State.

set_expires(_Expires, State) ->
    State.

set_last_modified(_LastModified, State) ->
    io:fwrite(standard_error, "TODOL set_last_modified~n", []),
    State.

set_resp_header(Header, Value, #machine_flow_state{exchange=Ex}=S) ->
    Ex1 = emx:set_resp_header(Header, Value, Ex),
    S#machine_flow_state{exchange=Ex1}.

get_resp_header(_Header, State) ->
    {undefined, State}.

match_etag(_Tag, _TagList) ->
    false.

encode_body_if_set(State) ->
    State.

set_header_if_not_set(_Header, _Value, State) ->
    State.
