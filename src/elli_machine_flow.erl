% Autogenerated with DRAKON Editor 1.22

-module(elli_machine_flow).
-export([handle_request/1]).
%%
%% Header
%%

-include_lib("elli/include/elli.hrl").
-include("elli_machine.hrl").
-include("elli_machine_internal.hrl").




accept_charset(State) ->
    % item 887
    CheckCharset = get_header(<<"Accept-Charset">>, State, <<"*">>),
    {CharsetsAvailable, S1} = call(charsets_provided, State),
    % item 892
    case CharsetsAvailable =:= no_charset of true -> 
        % item 895
        {true, [], S1}
    ; false ->
        % item 894
        ChosenCharset = 
            elli_machine_util:choose_charset(CharsetsAvailable, CheckCharset),
        % item 888
        case ChosenCharset =:= none of true -> 
            % item 890
            {false, [], S1}
        ; false ->
            % item 891
            S2 = set_resp_chosen_charset(ChosenCharset, S1),
            {true, CharsetsAvailable, S2}
        end
    end
.

accept_content_encoding(State) ->
    % item 961
    CheckEncoding = get_header(<<"Accept-Encoding">>, 
        State, <<"identity;q=1.0,*;q=0.5">>),
    {EncodingsProvided, S1} = call(content_encodings_provided, State),
    ChosenContentEncoding = 
        elli_machine_util:choose_encoding(EncodingsProvided, CheckEncoding),
    % item 962
    case ChosenContentEncoding =:= none of true -> 
        % item 965
        {false, [], State}
    ; false ->
        % item 966
        S2 = case ChosenContentEncoding of
            <<"identity">> -> 
                S1;
            _ ->
                Ex1 = emx:set_resp_header(<<"Content-Encoding">>, 
                    ChosenContentEncoding, exchange(S1)), 
                set_exchange(Ex1, S1)
        end,
        % item 960
        {true, EncodingsProvided, S2}
    end
.

accept_content_type(State) ->
    % item 902
    {ContentTypesProvided, S1} = call(content_types_provided, State),
    AcceptHeader = get_header(<<"Accept">>, State, undefined),
    % item 903
    case AcceptHeader =:= undefined of true -> 
        % item 910
        {Ct, Cf} = hd(ContentTypesProvided),
        S2 = with_exchange(fun(Ex) ->
                Ex1 = emx:set_resp_content_type(Ct, Ex),
                emx:set_resp_content_fun(Cf, Ex1) 
             end, S1),
        {true, ContentTypesProvided, S2}
    ; false ->
        % item 905
        ChosenMediaType = 
            elli_machine_util:select_media_type(ContentTypesProvided, AcceptHeader),
        % item 906
        case ChosenMediaType =:= none of true -> 
            % item 909
            {false, [], S1}
        ; false ->
            % item 911
            {MediaType, Fun} = ChosenMediaType,
            
            S2 = with_exchange(fun(Ex) ->
                    Ex1 = emx:set_resp_content_type(MediaType, Ex),
                    emx:set_resp_content_fun(Fun, Ex1) 
                 end, S1),
            
            {true, ContentTypesProvided, S2}
        end
    end
.

accept_language(State) ->
    % item 917
    Req = request(State),
    AcceptLanguageHeader = 
    	elli_request:get_header(<<"Accept-Language">>, Req),
    % item 918
    case AcceptLanguageHeader =:= undefined of true -> 
        % item 923
        {true, State}
    ; false ->
        % item 920
        {LanguageAvailable, S1} = call(language_available, State),
        % item 921
        case LanguageAvailable of true -> 
            % item 924
            {true, S1}
        ; false ->
            % item 925
            {false, S1}
        end
    end
.

call(Name, State) ->
    % item 1110
    Result = elli_machine_controller:call(Name, State),
    % item 1111
    {Answer, S1} = Result,
    % item 1126
    case is_tuple(Answer) of true -> 
        % item 1130
        Type = element(1, Answer),
        % item 1131
        case (Type =:= halt) orelse (Type =:= error) of true -> 
            % item 1122
            throw({Answer, S1})
        ; false ->
            % item 1129
            Result
        end
    ; false ->
        % item 1129
        Result
    end
.

content_negotiation(State) ->
    % item 932
    {ContentTypeAccepted, ContentTypesAvailable, S1} =
         accept_content_type(State),
    % item 933
    case ContentTypeAccepted of true -> 
        % item 938
        {LanguageAccepted, S2} = accept_language(S1),
        % item 939
        case LanguageAccepted of true -> 
            % item 942
            {CharsetAccepted, CharsetsAvailable, S3} = accept_charset(S2),
            % item 943
            case CharsetAccepted of true -> 
                % item 946
                {ContentEncodingAccepted, ContentEncodingsAvailable, S4} = 
                    accept_content_encoding(S3),
                % item 947
                case ContentEncodingAccepted of true -> 
                    % item 951
                    V1 = add_variance(ContentTypesAvailable, <<"Accept">>, []),
                    V2 = add_variance(CharsetsAvailable, <<"Accept-Charset">>, V1),
                    V3 = add_variance(ContentEncodingsAvailable, <<"Accept-Encoding">>, V2),
                    {ControllerVariances, S5} = call(variances, S4),
                    Variances = ControllerVariances ++ V3,
                    % item 952
                    case Variances =:= [] of true -> 
                        % item 954
                        {true, S5}
                    ; false ->
                        % item 937
                        S6 = set_resp_header(<<"Vary">>, 
                            elli_machine_util:binary_join(Variances, <<", ">>), S5),
                        {true, S6}
                    end
                ; false ->
                    % item 949
                    {false, S4}
                end
            ; false ->
                % item 945
                {false, S3}
            end
        ; false ->
            % item 941
            {false, S2}
        end
    ; false ->
        % item 936
        {false, S1}
    end
.

delete_flow(State) ->
    % item 972
    State
.

do_request(State) ->
    % item 407
    Req = request(State),
    % item 270
    {Pong, S1} = call(ping, State),
    % item 217
    case Pong =:= pong of true -> 
        % item 271
        {ServiceAvailable, S2} = 
            call(service_available, S1),
        % item 220
        case ServiceAvailable of true -> 
            % item 274
            {KnownMethods, S3} = 
                call(known_methods, S2),
            Method = elli_request:method(request(S3)),
            IsKnownMethod = 
                lists:member(Method, KnownMethods),
            % item 223
            case IsKnownMethod of true -> 
                % item 275
                {UriTooLong, S4} = call(uri_too_long, S3),
                % item 227
                case UriTooLong of true -> 
                    % item 230
                    % Request-URI Too Long
                    respond(414, S4)
                ; false ->
                    % item 276
                    {AllowedMethods, S5} = call(allowed_methods, S4),
                    IsAllowedMethod = 
                        lists:member(Method, AllowedMethods),
                    % item 231
                    case IsAllowedMethod of true -> 
                        % item 277
                        {MalformedRequest, S6} = 
                            call(malformed_request, S5),
                        % item 278
                        case MalformedRequest of true -> 
                            % item 280
                            % Bad Request
                            respond(400, S6)
                        ; false ->
                            % item 281
                            {IsAuthorized, S7} = call(is_authorized, S6),
                            % item 240
                            case IsAuthorized =:= true of true -> 
                                % item 283
                                {Forbidden, S8} = call(forbidden, S7),
                                % item 243
                                case Forbidden of true -> 
                                    % item 246
                                    % Forbidden
                                    respond(403, S7)
                                ; false ->
                                    % item 402
                                    case Method =:= 'OPTIONS' of true -> 
                                        % item 268
                                        options_flow(S8)
                                    ; false ->
                                        % item 489
                                        {ContentAccepted, S9} = content_negotiation(S8),
                                        % item 448
                                        case ContentAccepted of true -> 
                                            % item 2530001
                                            case (Method =:= 'GET') orelse (Method =:= 'HEAD') of true -> 
                                                % item 264
                                                get_flow(S9)
                                            ; false ->
                                                % item 2530003
                                                case Method =:= 'POST' of true -> 
                                                    % item 265
                                                    post_flow(S9)
                                                ; false ->
                                                    % item 2530004
                                                    case Method =:= 'PUT' of true -> 
                                                        % item 266
                                                        put_flow(S9)
                                                    ; false ->
                                                        % item 2530005
                                                        case Method =:= 'DELETE' of true -> 
                                                            []
                                                        ; false ->
                                                            % item 2530006
                                                            throw("Unexpected switch value")
                                                        end,
                                                        % item 267
                                                        delete_flow(S9)
                                                    end
                                                end
                                            end
                                        ; false ->
                                            % item 417
                                            % Not Acceptable
                                            respond(406, S8)
                                        end
                                    end
                                end
                            ; false ->
                                % item 680
                                case is_binary(IsAuthorized) of true -> 
                                    % item 986
                                    % item 684
                                    Ex = emx:set_resp_header(<<"WWW-Authenticate">>, 
                                        IsAuthorized, exchange(S7)), 
                                    S8 = set_exchange(Ex, S7),
                                    % item 282
                                    respond(401, S8)
                                ; false ->
                                    % item 683
                                    throw({error, no_auth_header})
                                end
                            end
                        end
                    ; false ->
                        % item 250
                        S6 = set_allowed_methods(
                            AllowedMethods, S5),
                        
                        % Method Not Allowed
                        respond(405, S6)
                    end
                end
            ; false ->
                % item 226
                % Not Implemented
                respond(501, S3)
            end
        ; false ->
            % item 219
            % Service Unavailable
            respond(503, S2)
        end
    ; false ->
        % item 273
        % Service Unavailable
        respond(503, S1)
    end
.

encode_etag(ETag) ->
    % item 1058
    % item 1057
    <<$", ETag/binary, $">>
.

exchange(State) ->
    % item 664
    State#machine_flow_state.exchange
.

finalize(State) ->
    % item 171
    case has_resp_body(State) of true -> 
        % item 189
        {MultipleChoices, S1} = call(multiple_choices, State),
        % item 174
        case MultipleChoices of true -> 
            % item 178
            % Multiple Choices
            respond(300, S1)
        ; false ->
            % item 192
            % OK
            respond(200, S1)
        end
    ; false ->
        % item 177
        % No Content
        respond(204, State)
    end
.

get_date_header(Header, Req) ->
    % item 1097
    D = elli_request:get_header(Header, Req),
    % item 1098
    case D =:= undefined of true -> 
        % item 1101
        undefined
    ; false ->
        % item 1103
        Date = try elli_machine_http_date:parse(D) of
                V -> V
            catch
                _:_ -> {error, catched}
        end,
        % item 1102
        case element(1, Date) =:= error of true -> 
            % item 1101
            undefined
        ; false ->
            % item 1104
            Date
        end
    end
.

get_flow(State) ->
    % item 772
    Req = request(State),
    {ResourceExists, S1} = call(resource_exists, State),
    % item 747
    case ResourceExists of true -> 
        % item 778
        {ETag, S2} = call(generate_etag, S1),
        IfMatchHeader = 
            elli_request:get_header(<<"If-Match">>, Req),
        % item 750
        case IfMatchHeader =/= undefined of true -> 
            % item 756
            case match_etag(ETag, IfMatchHeader) of true -> 
                % item 775
                {LastModified, S3} = call(last_modified, S2),
                % item 779
                case LastModified =/= undefined of true -> 
                    % item 774
                    IUS = get_date_header(<<"If-Unmodified-Since">>, Req),
                    % item 759
                    case IUS =:= undefined of true -> 
                        % item 773
                        S4 = set_etag(ETag, S3),
                        % item 1083
                        {Expires, S5} = call(expires, S4),
                        S6 = set_expires(Expires, S5),
                        % item 781
                        IfNoneMatch = 
                            elli_request:get_header(<<"If-None-Match">>, Req),
                        % item 1008
                        case IfNoneMatch =/= undefined of true -> 
                            % item 768
                            case match_etag(ETag, IfNoneMatch) of true -> 
                                % item 767
                                % Not Modified
                                respond(304, S6)
                            ; false ->
                                % item 1082
                                IMS = get_date_header(<<"If-Modified-Since">>, Req),
                                % item 1084
                                case IMS =/= undefined of true -> 
                                    % item 1090
                                    case LastModified =/= undefined of true -> 
                                        % item 1085
                                        case LastModified < IMS of true -> 
                                            % item 767
                                            % Not Modified
                                            respond(304, S6)
                                        ; false ->
                                            % item 769
                                            S7 = set_last_modified(LastModified, S6),
                                            
                                            Ex = exchange(S7),
                                            {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                            Ex1 = emx:set_resp_body(Response, Ex),
                                            S9 = set_exchange(Ex1, S8),
                                            
                                            S10 = set_content_type(S9),
                                            % item 771
                                            finalize(S10)
                                        end
                                    ; false ->
                                        % item 769
                                        S7 = set_last_modified(LastModified, S6),
                                        
                                        Ex = exchange(S7),
                                        {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                        Ex1 = emx:set_resp_body(Response, Ex),
                                        S9 = set_exchange(Ex1, S8),
                                        
                                        S10 = set_content_type(S9),
                                        % item 771
                                        finalize(S10)
                                    end
                                ; false ->
                                    % item 769
                                    S7 = set_last_modified(LastModified, S6),
                                    
                                    Ex = exchange(S7),
                                    {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                    Ex1 = emx:set_resp_body(Response, Ex),
                                    S9 = set_exchange(Ex1, S8),
                                    
                                    S10 = set_content_type(S9),
                                    % item 771
                                    finalize(S10)
                                end
                            end
                        ; false ->
                            % item 1082
                            IMS = get_date_header(<<"If-Modified-Since">>, Req),
                            % item 1084
                            case IMS =/= undefined of true -> 
                                % item 1090
                                case LastModified =/= undefined of true -> 
                                    % item 1085
                                    case LastModified < IMS of true -> 
                                        % item 767
                                        % Not Modified
                                        respond(304, S6)
                                    ; false ->
                                        % item 769
                                        S7 = set_last_modified(LastModified, S6),
                                        
                                        Ex = exchange(S7),
                                        {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                        Ex1 = emx:set_resp_body(Response, Ex),
                                        S9 = set_exchange(Ex1, S8),
                                        
                                        S10 = set_content_type(S9),
                                        % item 771
                                        finalize(S10)
                                    end
                                ; false ->
                                    % item 769
                                    S7 = set_last_modified(LastModified, S6),
                                    
                                    Ex = exchange(S7),
                                    {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                    Ex1 = emx:set_resp_body(Response, Ex),
                                    S9 = set_exchange(Ex1, S8),
                                    
                                    S10 = set_content_type(S9),
                                    % item 771
                                    finalize(S10)
                                end
                            ; false ->
                                % item 769
                                S7 = set_last_modified(LastModified, S6),
                                
                                Ex = exchange(S7),
                                {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                Ex1 = emx:set_resp_body(Response, Ex),
                                S9 = set_exchange(Ex1, S8),
                                
                                S10 = set_content_type(S9),
                                % item 771
                                finalize(S10)
                            end
                        end
                    ; false ->
                        % item 770
                        case LastModified > IUS of true -> 
                            % item 783
                            % Precondition Failed
                            respond(412, S3)
                        ; false ->
                            % item 773
                            S4 = set_etag(ETag, S3),
                            % item 1083
                            {Expires, S5} = call(expires, S4),
                            S6 = set_expires(Expires, S5),
                            % item 781
                            IfNoneMatch = 
                                elli_request:get_header(<<"If-None-Match">>, Req),
                            % item 1008
                            case IfNoneMatch =/= undefined of true -> 
                                % item 768
                                case match_etag(ETag, IfNoneMatch) of true -> 
                                    % item 767
                                    % Not Modified
                                    respond(304, S6)
                                ; false ->
                                    % item 1082
                                    IMS = get_date_header(<<"If-Modified-Since">>, Req),
                                    % item 1084
                                    case IMS =/= undefined of true -> 
                                        % item 1090
                                        case LastModified =/= undefined of true -> 
                                            % item 1085
                                            case LastModified < IMS of true -> 
                                                % item 767
                                                % Not Modified
                                                respond(304, S6)
                                            ; false ->
                                                % item 769
                                                S7 = set_last_modified(LastModified, S6),
                                                
                                                Ex = exchange(S7),
                                                {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                                Ex1 = emx:set_resp_body(Response, Ex),
                                                S9 = set_exchange(Ex1, S8),
                                                
                                                S10 = set_content_type(S9),
                                                % item 771
                                                finalize(S10)
                                            end
                                        ; false ->
                                            % item 769
                                            S7 = set_last_modified(LastModified, S6),
                                            
                                            Ex = exchange(S7),
                                            {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                            Ex1 = emx:set_resp_body(Response, Ex),
                                            S9 = set_exchange(Ex1, S8),
                                            
                                            S10 = set_content_type(S9),
                                            % item 771
                                            finalize(S10)
                                        end
                                    ; false ->
                                        % item 769
                                        S7 = set_last_modified(LastModified, S6),
                                        
                                        Ex = exchange(S7),
                                        {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                        Ex1 = emx:set_resp_body(Response, Ex),
                                        S9 = set_exchange(Ex1, S8),
                                        
                                        S10 = set_content_type(S9),
                                        % item 771
                                        finalize(S10)
                                    end
                                end
                            ; false ->
                                % item 1082
                                IMS = get_date_header(<<"If-Modified-Since">>, Req),
                                % item 1084
                                case IMS =/= undefined of true -> 
                                    % item 1090
                                    case LastModified =/= undefined of true -> 
                                        % item 1085
                                        case LastModified < IMS of true -> 
                                            % item 767
                                            % Not Modified
                                            respond(304, S6)
                                        ; false ->
                                            % item 769
                                            S7 = set_last_modified(LastModified, S6),
                                            
                                            Ex = exchange(S7),
                                            {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                            Ex1 = emx:set_resp_body(Response, Ex),
                                            S9 = set_exchange(Ex1, S8),
                                            
                                            S10 = set_content_type(S9),
                                            % item 771
                                            finalize(S10)
                                        end
                                    ; false ->
                                        % item 769
                                        S7 = set_last_modified(LastModified, S6),
                                        
                                        Ex = exchange(S7),
                                        {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                        Ex1 = emx:set_resp_body(Response, Ex),
                                        S9 = set_exchange(Ex1, S8),
                                        
                                        S10 = set_content_type(S9),
                                        % item 771
                                        finalize(S10)
                                    end
                                ; false ->
                                    % item 769
                                    S7 = set_last_modified(LastModified, S6),
                                    
                                    Ex = exchange(S7),
                                    {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                    Ex1 = emx:set_resp_body(Response, Ex),
                                    S9 = set_exchange(Ex1, S8),
                                    
                                    S10 = set_content_type(S9),
                                    % item 771
                                    finalize(S10)
                                end
                            end
                        end
                    end
                ; false ->
                    % item 773
                    S4 = set_etag(ETag, S3),
                    % item 1083
                    {Expires, S5} = call(expires, S4),
                    S6 = set_expires(Expires, S5),
                    % item 781
                    IfNoneMatch = 
                        elli_request:get_header(<<"If-None-Match">>, Req),
                    % item 1008
                    case IfNoneMatch =/= undefined of true -> 
                        % item 768
                        case match_etag(ETag, IfNoneMatch) of true -> 
                            % item 767
                            % Not Modified
                            respond(304, S6)
                        ; false ->
                            % item 1082
                            IMS = get_date_header(<<"If-Modified-Since">>, Req),
                            % item 1084
                            case IMS =/= undefined of true -> 
                                % item 1090
                                case LastModified =/= undefined of true -> 
                                    % item 1085
                                    case LastModified < IMS of true -> 
                                        % item 767
                                        % Not Modified
                                        respond(304, S6)
                                    ; false ->
                                        % item 769
                                        S7 = set_last_modified(LastModified, S6),
                                        
                                        Ex = exchange(S7),
                                        {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                        Ex1 = emx:set_resp_body(Response, Ex),
                                        S9 = set_exchange(Ex1, S8),
                                        
                                        S10 = set_content_type(S9),
                                        % item 771
                                        finalize(S10)
                                    end
                                ; false ->
                                    % item 769
                                    S7 = set_last_modified(LastModified, S6),
                                    
                                    Ex = exchange(S7),
                                    {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                    Ex1 = emx:set_resp_body(Response, Ex),
                                    S9 = set_exchange(Ex1, S8),
                                    
                                    S10 = set_content_type(S9),
                                    % item 771
                                    finalize(S10)
                                end
                            ; false ->
                                % item 769
                                S7 = set_last_modified(LastModified, S6),
                                
                                Ex = exchange(S7),
                                {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                Ex1 = emx:set_resp_body(Response, Ex),
                                S9 = set_exchange(Ex1, S8),
                                
                                S10 = set_content_type(S9),
                                % item 771
                                finalize(S10)
                            end
                        end
                    ; false ->
                        % item 1082
                        IMS = get_date_header(<<"If-Modified-Since">>, Req),
                        % item 1084
                        case IMS =/= undefined of true -> 
                            % item 1090
                            case LastModified =/= undefined of true -> 
                                % item 1085
                                case LastModified < IMS of true -> 
                                    % item 767
                                    % Not Modified
                                    respond(304, S6)
                                ; false ->
                                    % item 769
                                    S7 = set_last_modified(LastModified, S6),
                                    
                                    Ex = exchange(S7),
                                    {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                    Ex1 = emx:set_resp_body(Response, Ex),
                                    S9 = set_exchange(Ex1, S8),
                                    
                                    S10 = set_content_type(S9),
                                    % item 771
                                    finalize(S10)
                                end
                            ; false ->
                                % item 769
                                S7 = set_last_modified(LastModified, S6),
                                
                                Ex = exchange(S7),
                                {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                Ex1 = emx:set_resp_body(Response, Ex),
                                S9 = set_exchange(Ex1, S8),
                                
                                S10 = set_content_type(S9),
                                % item 771
                                finalize(S10)
                            end
                        ; false ->
                            % item 769
                            S7 = set_last_modified(LastModified, S6),
                            
                            Ex = exchange(S7),
                            {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                            Ex1 = emx:set_resp_body(Response, Ex),
                            S9 = set_exchange(Ex1, S8),
                            
                            S10 = set_content_type(S9),
                            % item 771
                            finalize(S10)
                        end
                    end
                end
            ; false ->
                % item 758
                % Precondition Failed
                respond(412, S2)
            end
        ; false ->
            % item 775
            {LastModified, S3} = call(last_modified, S2),
            % item 779
            case LastModified =/= undefined of true -> 
                % item 774
                IUS = get_date_header(<<"If-Unmodified-Since">>, Req),
                % item 759
                case IUS =:= undefined of true -> 
                    % item 773
                    S4 = set_etag(ETag, S3),
                    % item 1083
                    {Expires, S5} = call(expires, S4),
                    S6 = set_expires(Expires, S5),
                    % item 781
                    IfNoneMatch = 
                        elli_request:get_header(<<"If-None-Match">>, Req),
                    % item 1008
                    case IfNoneMatch =/= undefined of true -> 
                        % item 768
                        case match_etag(ETag, IfNoneMatch) of true -> 
                            % item 767
                            % Not Modified
                            respond(304, S6)
                        ; false ->
                            % item 1082
                            IMS = get_date_header(<<"If-Modified-Since">>, Req),
                            % item 1084
                            case IMS =/= undefined of true -> 
                                % item 1090
                                case LastModified =/= undefined of true -> 
                                    % item 1085
                                    case LastModified < IMS of true -> 
                                        % item 767
                                        % Not Modified
                                        respond(304, S6)
                                    ; false ->
                                        % item 769
                                        S7 = set_last_modified(LastModified, S6),
                                        
                                        Ex = exchange(S7),
                                        {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                        Ex1 = emx:set_resp_body(Response, Ex),
                                        S9 = set_exchange(Ex1, S8),
                                        
                                        S10 = set_content_type(S9),
                                        % item 771
                                        finalize(S10)
                                    end
                                ; false ->
                                    % item 769
                                    S7 = set_last_modified(LastModified, S6),
                                    
                                    Ex = exchange(S7),
                                    {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                    Ex1 = emx:set_resp_body(Response, Ex),
                                    S9 = set_exchange(Ex1, S8),
                                    
                                    S10 = set_content_type(S9),
                                    % item 771
                                    finalize(S10)
                                end
                            ; false ->
                                % item 769
                                S7 = set_last_modified(LastModified, S6),
                                
                                Ex = exchange(S7),
                                {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                Ex1 = emx:set_resp_body(Response, Ex),
                                S9 = set_exchange(Ex1, S8),
                                
                                S10 = set_content_type(S9),
                                % item 771
                                finalize(S10)
                            end
                        end
                    ; false ->
                        % item 1082
                        IMS = get_date_header(<<"If-Modified-Since">>, Req),
                        % item 1084
                        case IMS =/= undefined of true -> 
                            % item 1090
                            case LastModified =/= undefined of true -> 
                                % item 1085
                                case LastModified < IMS of true -> 
                                    % item 767
                                    % Not Modified
                                    respond(304, S6)
                                ; false ->
                                    % item 769
                                    S7 = set_last_modified(LastModified, S6),
                                    
                                    Ex = exchange(S7),
                                    {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                    Ex1 = emx:set_resp_body(Response, Ex),
                                    S9 = set_exchange(Ex1, S8),
                                    
                                    S10 = set_content_type(S9),
                                    % item 771
                                    finalize(S10)
                                end
                            ; false ->
                                % item 769
                                S7 = set_last_modified(LastModified, S6),
                                
                                Ex = exchange(S7),
                                {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                Ex1 = emx:set_resp_body(Response, Ex),
                                S9 = set_exchange(Ex1, S8),
                                
                                S10 = set_content_type(S9),
                                % item 771
                                finalize(S10)
                            end
                        ; false ->
                            % item 769
                            S7 = set_last_modified(LastModified, S6),
                            
                            Ex = exchange(S7),
                            {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                            Ex1 = emx:set_resp_body(Response, Ex),
                            S9 = set_exchange(Ex1, S8),
                            
                            S10 = set_content_type(S9),
                            % item 771
                            finalize(S10)
                        end
                    end
                ; false ->
                    % item 770
                    case LastModified > IUS of true -> 
                        % item 783
                        % Precondition Failed
                        respond(412, S3)
                    ; false ->
                        % item 773
                        S4 = set_etag(ETag, S3),
                        % item 1083
                        {Expires, S5} = call(expires, S4),
                        S6 = set_expires(Expires, S5),
                        % item 781
                        IfNoneMatch = 
                            elli_request:get_header(<<"If-None-Match">>, Req),
                        % item 1008
                        case IfNoneMatch =/= undefined of true -> 
                            % item 768
                            case match_etag(ETag, IfNoneMatch) of true -> 
                                % item 767
                                % Not Modified
                                respond(304, S6)
                            ; false ->
                                % item 1082
                                IMS = get_date_header(<<"If-Modified-Since">>, Req),
                                % item 1084
                                case IMS =/= undefined of true -> 
                                    % item 1090
                                    case LastModified =/= undefined of true -> 
                                        % item 1085
                                        case LastModified < IMS of true -> 
                                            % item 767
                                            % Not Modified
                                            respond(304, S6)
                                        ; false ->
                                            % item 769
                                            S7 = set_last_modified(LastModified, S6),
                                            
                                            Ex = exchange(S7),
                                            {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                            Ex1 = emx:set_resp_body(Response, Ex),
                                            S9 = set_exchange(Ex1, S8),
                                            
                                            S10 = set_content_type(S9),
                                            % item 771
                                            finalize(S10)
                                        end
                                    ; false ->
                                        % item 769
                                        S7 = set_last_modified(LastModified, S6),
                                        
                                        Ex = exchange(S7),
                                        {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                        Ex1 = emx:set_resp_body(Response, Ex),
                                        S9 = set_exchange(Ex1, S8),
                                        
                                        S10 = set_content_type(S9),
                                        % item 771
                                        finalize(S10)
                                    end
                                ; false ->
                                    % item 769
                                    S7 = set_last_modified(LastModified, S6),
                                    
                                    Ex = exchange(S7),
                                    {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                    Ex1 = emx:set_resp_body(Response, Ex),
                                    S9 = set_exchange(Ex1, S8),
                                    
                                    S10 = set_content_type(S9),
                                    % item 771
                                    finalize(S10)
                                end
                            end
                        ; false ->
                            % item 1082
                            IMS = get_date_header(<<"If-Modified-Since">>, Req),
                            % item 1084
                            case IMS =/= undefined of true -> 
                                % item 1090
                                case LastModified =/= undefined of true -> 
                                    % item 1085
                                    case LastModified < IMS of true -> 
                                        % item 767
                                        % Not Modified
                                        respond(304, S6)
                                    ; false ->
                                        % item 769
                                        S7 = set_last_modified(LastModified, S6),
                                        
                                        Ex = exchange(S7),
                                        {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                        Ex1 = emx:set_resp_body(Response, Ex),
                                        S9 = set_exchange(Ex1, S8),
                                        
                                        S10 = set_content_type(S9),
                                        % item 771
                                        finalize(S10)
                                    end
                                ; false ->
                                    % item 769
                                    S7 = set_last_modified(LastModified, S6),
                                    
                                    Ex = exchange(S7),
                                    {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                    Ex1 = emx:set_resp_body(Response, Ex),
                                    S9 = set_exchange(Ex1, S8),
                                    
                                    S10 = set_content_type(S9),
                                    % item 771
                                    finalize(S10)
                                end
                            ; false ->
                                % item 769
                                S7 = set_last_modified(LastModified, S6),
                                
                                Ex = exchange(S7),
                                {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                Ex1 = emx:set_resp_body(Response, Ex),
                                S9 = set_exchange(Ex1, S8),
                                
                                S10 = set_content_type(S9),
                                % item 771
                                finalize(S10)
                            end
                        end
                    end
                end
            ; false ->
                % item 773
                S4 = set_etag(ETag, S3),
                % item 1083
                {Expires, S5} = call(expires, S4),
                S6 = set_expires(Expires, S5),
                % item 781
                IfNoneMatch = 
                    elli_request:get_header(<<"If-None-Match">>, Req),
                % item 1008
                case IfNoneMatch =/= undefined of true -> 
                    % item 768
                    case match_etag(ETag, IfNoneMatch) of true -> 
                        % item 767
                        % Not Modified
                        respond(304, S6)
                    ; false ->
                        % item 1082
                        IMS = get_date_header(<<"If-Modified-Since">>, Req),
                        % item 1084
                        case IMS =/= undefined of true -> 
                            % item 1090
                            case LastModified =/= undefined of true -> 
                                % item 1085
                                case LastModified < IMS of true -> 
                                    % item 767
                                    % Not Modified
                                    respond(304, S6)
                                ; false ->
                                    % item 769
                                    S7 = set_last_modified(LastModified, S6),
                                    
                                    Ex = exchange(S7),
                                    {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                    Ex1 = emx:set_resp_body(Response, Ex),
                                    S9 = set_exchange(Ex1, S8),
                                    
                                    S10 = set_content_type(S9),
                                    % item 771
                                    finalize(S10)
                                end
                            ; false ->
                                % item 769
                                S7 = set_last_modified(LastModified, S6),
                                
                                Ex = exchange(S7),
                                {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                Ex1 = emx:set_resp_body(Response, Ex),
                                S9 = set_exchange(Ex1, S8),
                                
                                S10 = set_content_type(S9),
                                % item 771
                                finalize(S10)
                            end
                        ; false ->
                            % item 769
                            S7 = set_last_modified(LastModified, S6),
                            
                            Ex = exchange(S7),
                            {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                            Ex1 = emx:set_resp_body(Response, Ex),
                            S9 = set_exchange(Ex1, S8),
                            
                            S10 = set_content_type(S9),
                            % item 771
                            finalize(S10)
                        end
                    end
                ; false ->
                    % item 1082
                    IMS = get_date_header(<<"If-Modified-Since">>, Req),
                    % item 1084
                    case IMS =/= undefined of true -> 
                        % item 1090
                        case LastModified =/= undefined of true -> 
                            % item 1085
                            case LastModified < IMS of true -> 
                                % item 767
                                % Not Modified
                                respond(304, S6)
                            ; false ->
                                % item 769
                                S7 = set_last_modified(LastModified, S6),
                                
                                Ex = exchange(S7),
                                {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                                Ex1 = emx:set_resp_body(Response, Ex),
                                S9 = set_exchange(Ex1, S8),
                                
                                S10 = set_content_type(S9),
                                % item 771
                                finalize(S10)
                            end
                        ; false ->
                            % item 769
                            S7 = set_last_modified(LastModified, S6),
                            
                            Ex = exchange(S7),
                            {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                            Ex1 = emx:set_resp_body(Response, Ex),
                            S9 = set_exchange(Ex1, S8),
                            
                            S10 = set_content_type(S9),
                            % item 771
                            finalize(S10)
                        end
                    ; false ->
                        % item 769
                        S7 = set_last_modified(LastModified, S6),
                        
                        Ex = exchange(S7),
                        {Response, S8} = call(emx:get_resp_content_fun(Ex), S7),
                        Ex1 = emx:set_resp_body(Response, Ex),
                        S9 = set_exchange(Ex1, S8),
                        
                        S10 = set_content_type(S9),
                        % item 771
                        finalize(S10)
                    end
                end
            end
        end
    ; false ->
        % item 784
        get_flow_no_resource(S1)
    end
.

get_flow_no_resource(State) ->
    % item 803
    {PreviouslyExisted, S1} =
        call(previously_existed, State),
    % item 790
    case PreviouslyExisted of true -> 
        % item 804
        {MovedPermanently, S2} = 
            call(moved_permanently, S1),
        % item 794
        case MovedPermanently of true -> 
            % item 797
            % Moved Permanently
            respond(301, S2)
        ; false ->
            % item 805
            {MovedTemporarily, S3} =
                call(moved_temporarily, S2),
            % item 798
            case MovedTemporarily of true -> 
                % item 801
                % Moved Temporarily
                respond(307, S3)
            ; false ->
                % item 802
                % Gone
                respond(410, S3)
            end
        end
    ; false ->
        % item 793
        % Not Found
        respond(404, S1)
    end
.

get_header(Name, State, Default) ->
    % item 658
    case elli_request:get_header(Name, request(State)) of
        undefined -> Default;
        Hdr -> Hdr
    end
.

handle_request(State) ->
    % item 596
    {Code, EndDoRequestState} = 
        try do_request(State) of
            {_Code, _S1}=R -> R
        catch
            throw:{{halt, C}, S1} -> {C, S1}
        end,
    % item 598
    CodeState = set_response_code(Code, EndDoRequestState),
    % item 597
    call(finish_request, CodeState)
.

has_resp_body(State) ->
    % item 652
    emx:has_resp_body(exchange(State))
.

is_range_ok(State) ->
    % item 1151
    emx:is_range_ok(exchange(State))
.

match_etag(ETag, HeaderVal) ->
    % item 1011
    case HeaderVal =:= <<$*>> of true -> 
        % item 997
        true
    ; false ->
        % item 993
        ETags = elli_machine_util:split_quoted_strings(HeaderVal),
        % item 994
        lists:member(ETag, ETags)
    end
.

options_flow(State) ->
    % item 984
    {Hdrs, S1} = call(options, State),
    Exc = exchange(State),
    Exc1 = emx:set_resp_headers(Hdrs, Exc),
    S2 = set_exchange(Exc1, S1),
    % item 985
    % Ok
    respond(200, S2)
.

post_flow(State) ->
    % item 826
    Req = request(State),
    % item 838
    {ValidContentHeaders, S1} = 
        call(valid_content_headers, State),
    % item 841
    case ValidContentHeaders of true -> 
        % item 839
        {KnownContentType, S2} =
            call(known_content_type, S1),
        % item 843
        case KnownContentType of true -> 
            % item 840
            {ValidEntityLength, S3} =
                call(valid_entity_length, S2),
            % item 845
            case ValidEntityLength of true -> 
                % item 837
                {ResourceExists, S4} = 
                    call(resource_exists, S3),
                % item 811
                case ResourceExists of true -> 
                    % item 828
                    {LastModified, S5} = call(last_modified, S4),
                    % item 829
                    case LastModified =:= undefined of true -> 
                        % item 827
                        IfModifiedSince =
                            elli_request:get_header(<<"If-Modified-Since">>, Req),
                        % item 814
                        case IfModifiedSince =:= undefined of true -> 
                            % item 831
                            {SelectedContentType, S6} = 
                                select_content_type(S5),
                            % item 815
                            case SelectedContentType =:= none of true -> 
                                % item 818
                                % Unsupported MediaType
                                respond(415, S6)
                            ; false ->
                                % item 832
                                {_, ProcessFun} = SelectedContentType,
                                {ProcessResult, S7} = call(ProcessFun, S6),
                                S8 = encode_body_if_set(S7),
                                % item 835
                                case ProcessResult =:= true of true -> 
                                    % item 1065
                                    S9 = set_content_type(S8),
                                    % item 834
                                    finalize(S9)
                                ; false ->
                                    % item 833
                                    {redirect, Url} = ProcessResult,
                                    S8 = set_header_if_not_set(<<"Location">>, Url, S7),
                                    % item 817
                                    % See Other
                                    respond(303, S8)
                                end
                            end
                        ; false ->
                            % item 821
                            case LastModified > IfModifiedSince of true -> 
                                % item 831
                                {SelectedContentType, S6} = 
                                    select_content_type(S5),
                                % item 815
                                case SelectedContentType =:= none of true -> 
                                    % item 818
                                    % Unsupported MediaType
                                    respond(415, S6)
                                ; false ->
                                    % item 832
                                    {_, ProcessFun} = SelectedContentType,
                                    {ProcessResult, S7} = call(ProcessFun, S6),
                                    S8 = encode_body_if_set(S7),
                                    % item 835
                                    case ProcessResult =:= true of true -> 
                                        % item 1065
                                        S9 = set_content_type(S8),
                                        % item 834
                                        finalize(S9)
                                    ; false ->
                                        % item 833
                                        {redirect, Url} = ProcessResult,
                                        S8 = set_header_if_not_set(<<"Location">>, Url, S7),
                                        % item 817
                                        % See Other
                                        respond(303, S8)
                                    end
                                end
                            ; false ->
                                % item 823
                                % generate_etag/2,
                                % item 824
                                % expires/2,
                                % item 825
                                % Not Modified
                                respond(304, S5)
                            end
                        end
                    ; false ->
                        % item 831
                        {SelectedContentType, S6} = 
                            select_content_type(S5),
                        % item 815
                        case SelectedContentType =:= none of true -> 
                            % item 818
                            % Unsupported MediaType
                            respond(415, S6)
                        ; false ->
                            % item 832
                            {_, ProcessFun} = SelectedContentType,
                            {ProcessResult, S7} = call(ProcessFun, S6),
                            S8 = encode_body_if_set(S7),
                            % item 835
                            case ProcessResult =:= true of true -> 
                                % item 1065
                                S9 = set_content_type(S8),
                                % item 834
                                finalize(S9)
                            ; false ->
                                % item 833
                                {redirect, Url} = ProcessResult,
                                S8 = set_header_if_not_set(<<"Location">>, Url, S7),
                                % item 817
                                % See Other
                                respond(303, S8)
                            end
                        end
                    end
                ; false ->
                    % item 850
                    post_flow_no_resource(S4)
                end
            ; false ->
                % item 847
                % Request Entity Too Large
                respond(413, S3)
            end
        ; false ->
            % item 848
            % Unsupported Media Type
            respond(415, S2)
        end
    ; false ->
        % item 849
        % Not Implemented
        respond(501, S1)
    end
.

post_flow_no_resource(State) ->
    % item 873
    {PreviouslyExisted, S1} =
        call(previously_existed, State),
    % item 856
    case PreviouslyExisted of true -> 
        % item 874
        {MovedPermanently, S2} = 
            call(moved_permanently, S1),
        % item 858
        case MovedPermanently of true -> 
            % item 863
            % Moved Permanently
            respond(301, S2)
        ; false ->
            % item 875
            {MovedTemporarily, S3} = 
                call(moved_temporarily, S2),
            % item 864
            case MovedTemporarily of true -> 
                % item 865
                % Moved Temporarily
                respond(307, S3)
            ; false ->
                % item 866
                % Gone
                respond(410, S3)
            end
        end
    ; false ->
        % item 876
        {AllowMissingPost, S2} = 
            call(allow_missing_post, S1),
        % item 861
        case AllowMissingPost of true -> 
            % item 878
            {SelectedContentType, S3} = 
                select_content_type(S2),
            % item 867
            case SelectedContentType =:= none of true -> 
                % item 879
                {_, ProcessFun} = SelectedContentType,
                {ProcessResult, S4} = call(ProcessFun, S3),
                Location = get_resp_header(<<"Location">>, S4),
                % item 869
                case Location =/= undefined of true -> 
                    % item 871
                    % Created
                    respond(201, S4)
                ; false ->
                    % item 872
                    finalize(S4)
                end
            ; false ->
                % item 877
                % Unsupported MediaType
                respond(415, S3)
            end
        ; false ->
            % item 860
            % Not Found
            respond(404, S2)
        end
    end
.

put_flow(State) ->
    % item 978
    State
.

request(State) ->
    % item 646
    Exchange = State#machine_flow_state.exchange,
    Exchange#machine_exchange.req
.

respond(Code, State) ->
    % item 670
    {Code, State}
.

select_content_type(State) ->
    % item 628
    ContentTypeHeader = get_header(<<"Content-Type">>, State, <<"application/octet-stream">>),
    {ContentTypesAccepted, S1} = call(content_types_accepted, State),
    SelectedContentType = elli_machine_util:select_content_type(ContentTypesAccepted, ContentTypeHeader),
    {SelectedContentType, S1}
.

set_allowed_methods(AllowedMethods, State) ->
    % item 679
    BinMethods = [ erlang:atom_to_binary(M, latin1) || M <- AllowedMethods], 
    HeaderValues = elli_machine_util:binary_join(BinMethods, <<", ">>),
    set_resp_header(<<"Allow">>, HeaderValues, State)
.

set_content_type(State) ->
    % item 1064
    with_exchange(fun(Exchange) ->
            CType = emx:get_resp_content_type(Exchange),
            CSet = case emx:get_resp_chosen_charset(Exchange) of
                undefined -> <<"">>;
                Cs -> <<"; charset=", Cs/binary>>
            end,
            emx:set_resp_header(<<"Content-Type">>, 
            <<CType/binary, CSet/binary>>, Exchange) 
        end, State)
.

set_date_header(Header, Date, State) ->
    % item 1029
    case Date =:= undefined of true -> 
        % item 1032
        State
    ; false ->
        % item 1035
        case is_binary(Date) of true -> 
            % item 1038
            V = Date
        ; false ->
            % item 1034
            V = elli_machine_util:rfc1123_date(Date)
        end,
        % item 1033
        set_resp_header(Header, V, State)
    end
.

set_etag(ETag, State) ->
    % item 1019
    case ETag =:= undefined of true -> 
        % item 1022
        State
    ; false ->
        % item 1051
        ETagValue = encode_etag(ETag),
        % item 1023
        set_resp_header(<<"ETag">>, ETagValue, State)
    end
.

set_exchange(Exchange, State) ->
    % item 634
    State#machine_flow_state{exchange=Exchange}
.

set_expires(Expires, State) ->
    % item 1044
    set_date_header(<<"Expires">>, Expires, State)
.

set_last_modified(LastModified, State) ->
    % item 1050
    set_date_header(<<"Last-Modified">>, LastModified, State)
.

set_response_code(Code, State) ->
    % item 640
    Ex = emx:set_resp_code(Code, exchange(State)),
    set_exchange(Ex, State)
.

with_exchange(Fun, State) ->
    % item 622
    Exchange = Fun(State#machine_flow_state.exchange),
    State#machine_flow_state{exchange=Exchange}
.

%%
%% Helpers
%%

% @doc Add a variance if needed.
add_variance([], _, Variances) ->
    Variances;
add_variance([_], _, Variances) ->
    Variances;
add_variance(_, Name, Variances) ->
    [Name | Variances].


% @doc Set the response's chosen charset
set_resp_chosen_charset(Charset, State) ->
    Ex = emx:set_resp_chosen_charset(Charset, exchange(State)),
    set_exchange(Ex, State).
    
set_resp_header(Header, Value, State) ->
    Ex = emx:set_resp_header(Header, Value, exchange(State)),
    set_exchange(Ex, State).

get_resp_header(Header, State) ->
    {emx:get_resp_header(Header, exchange(State)), State}.

encode_body_if_set(State) ->
    State.

set_header_if_not_set(Header, Value, #machine_flow_state{exchange=Ex}=State) ->
    Ex1 = case emx:get_resp_header(Header, Ex) of
        undefined ->
            emx:set_resp_header(Header, Value, Ex);
        _ -> Ex
    end,
    set_exchange(Ex1, State).
